name: tests

on: 
    push:
      branches: ["main"]
    pull_request:
      branches: ["*"]
    
jobs:
    blender:
        runs-on: ${{ matrix.os }}
        strategy:
            max-parallel: 4
            fail-fast: false
            matrix:
              version: ["4.5", "daily"]
              os: [ubuntu-latest, macos-latest, windows-latest]
        steps:
            - uses: actions/checkout@v4
            - uses: BradyAJohnston/setup-blender@v3
              with:
                version: ${{ matrix.version }}
            - name: Install in Blender
              run: |
                blender -b -P tests/python.py -- -m pip install ".[test]"
            - name: Run Tests
              run: |
                blender -b -P tests/run.py -- -vv tests --cov --cov-report=xml
    
            - name: Expose coverage as a CI download 
              uses: actions/upload-artifact@v4
              if: matrix.os == 'ubuntu-latest' && matrix.version == '4.2.5'
              with:
                name: coverage.xml
                path: coverage.xml

            - name: Upload coverage reports to Codecov
              if: matrix.os == 'ubuntu-latest'
              uses: codecov/codecov-action@v3
    
    bpy:
        runs-on: ${{ matrix.os }}
        strategy:
            max-parallel: 4
            fail-fast: false
            matrix:
              version: ["4.5"]
              os: [ubuntu-latest, macos-latest]
        steps:
            - uses: actions/checkout@v4
            - name: Install uv
              uses: astral-sh/setup-uv@v5
            - name: Install molecularnodes
              run: |
                uv sync --all-extras
            - name: Run Tests "not density"
              timeout-minutes: 5
              continue-on-error: true
              run: |
                uv run pytest -n auto -k "not density" --junitxml=test-results-1.xml || echo "TEST_RESULT_1=$?" >> $GITHUB_ENV
                
            - name: Run Tests "density" 
              timeout-minutes: 3
              continue-on-error: true
              run: |
                uv run pytest -k density --junitxml=test-results-2.xml || echo "TEST_RESULT_2=$?" >> $GITHUB_ENV
                
            - name: Check Test Results
              run: |
                # Check if test result files exist and contain failures
                FAILED=false
                
                if [ -f "test-results-1.xml" ]; then
                  if grep -q 'failures="[^0]' test-results-1.xml || grep -q 'errors="[^0]' test-results-1.xml; then
                    echo "Tests 'not density' had failures"
                    FAILED=true
                  fi
                else
                  echo "Test results file 1 not found, assuming failure"
                  FAILED=true
                fi
                
                if [ -f "test-results-2.xml" ]; then
                  if grep -q 'failures="[^0]' test-results-2.xml || grep -q 'errors="[^0]' test-results-2.xml; then
                    echo "Tests 'density' had failures"
                    FAILED=true
                  fi
                else
                  echo "Test results file 2 not found, assuming failure"
                  FAILED=true
                fi
                
                if [ "$FAILED" = true ]; then
                  echo "Tests failed"
                  exit 1
                else
                  echo "All tests passed successfully"
                  exit 0
                fi
      
