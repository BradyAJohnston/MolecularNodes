{
  "hash": "37a0bd9dd8177dd14aa5289a8a385813",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Materials\"\nengine: jupyter\nfig-align: center\nexecute: \n  freeze: auto\n  cache: true\n\n---\n\n\n\n\nWe can progrommatically access the properties of the materials like this:\n\n::: {#0d0d47e6 .cell execution_count=1}\n``` {.python .cell-code}\nimport molecularnodes as mn\nmn.register()\nmn.assets.install()\ncan = mn.Canvas()\ncan.scene_reset()\ncan.resolution = (860, 540)\ncan.render_engine = \"EEVEE\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nregister_class(...): already registered as a subclass 'MN_PT_Scene'\nregister_class(...): already registered as a subclass 'MN_OT_Add_Custom_Node_Group'\nregister_class(...): already registered as a subclass 'MN_OT_Residues_Selection_Custom'\nregister_class(...): already registered as a subclass 'MN_OT_Assembly_Bio'\nregister_class(...): already registered as a subclass 'MN_OT_iswitch_custom'\nregister_class(...): already registered as a subclass 'MN_OT_Change_Color'\nregister_class(...): already registered as a subclass 'MN_OT_Node_Swap'\nregister_class(...): already registered as a subclass 'MN_OT_Import_Fetch'\nregister_class(...): already registered as a subclass 'MN_OT_Import_OxDNA_Trajectory'\nregister_class(...): already registered as a subclass 'MN_OT_Import_Trajectory'\nregister_class(...): already registered as a subclass 'MN_OT_Reload_Trajectory'\nregister_class(...): already registered as a subclass 'MN_OT_Import_Map'\nregister_class(...): already registered as a subclass 'MN_OT_Import_Star_File'\nregister_class(...): already registered as a subclass 'MN_OT_Import_Cell_Pack'\nregister_class(...): already registered as a subclass 'MN_OT_Import_Protein_Local'\nregister_class(...): already registered as a subclass 'MN_OT_Import_Molecule'\nregister_class(...): already registered as a subclass 'MN_FH_Import_Molecule'\nregister_class(...): already registered as a subclass 'MolecularNodesObjectProperties'\nregister_class(...): already registered as a subclass 'MolecularNodesSceneProperties'\nregister_class(...): already registered as a subclass 'TrajectorySelectionItem'\nregister_class(...): already registered as a subclass 'MN_UL_TrajectorySelectionListUI'\nregister_class(...): already registered as a subclass 'MN_OT_Universe_Selection_Add'\nregister_class(...): already registered as a subclass 'MN_OT_Universe_Selection_Delete'\nregister_class(...): already registered as a subclass 'MN_OT_Template_Install'\nregister_class(...): already registered as a subclass 'MN_OT_Template_Uninstall'\nregister_class(...): already registered as a subclass 'MolecularNodesPreferences'\nregister_class(...): already registered as a subclass 'MN_OT_Session_Remove_Item'\nregister_class(...): already registered as a subclass 'MN_OT_Session_Create_Object'\nregister_class(...): already registered as a subclass 'MN_MT_Node'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Animate'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Assembly'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Bonds'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Color'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Density'\nregister_class(...): already registered as a subclass 'MN_MT_Node_DNA'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Style'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Select'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Topology'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Geometry'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Curves'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Utils'\nregister_class(...): already registered as a subclass 'MN_MT_Node_Fields'\n```\n:::\n:::\n\n\n::: {#43d53494 .cell execution_count=2}\n``` {.python .cell-code}\nmol = mn.Molecule.fetch(\"8H1B\").add_style(\"surface\", material = mn.material.AmbientOcclusion())\ncan.frame_object(mol)\ncan.snapshot()\n```\n\n::: {.cell-output .cell-output-display}\n![](materials_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n::: {#2112b1bb .cell execution_count=3}\n``` {.python .cell-code}\nmol.styles[0].material.ambient_occlusion_distance = 0.1\ncan.snapshot()\n```\n\n::: {.cell-output .cell-output-display}\n![](materials_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\n::: {#fd15d946 .cell execution_count=4}\n``` {.python .cell-code}\n[x for x in dir(mn.material.AmbientOcclusion()) if not x.startswith(\"_\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n['ambient_occlusion_color',\n 'ambient_occlusion_distance',\n 'ambient_occlusion_normal',\n 'emission_color',\n 'emission_strength',\n 'emission_weight',\n 'links',\n 'material',\n 'math_value',\n 'mix_a',\n 'mix_b',\n 'mix_factor',\n 'node_tree',\n 'nodes']\n```\n:::\n:::\n\n\n",
    "supporting": [
      "materials_files"
    ],
    "filters": [],
    "includes": {}
  }
}