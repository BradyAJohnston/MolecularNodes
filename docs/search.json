[
  {
    "objectID": "documentation.html",
    "href": "documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "The Molecular Nodes panel can be accessed in the scene properties tab. This panel can additionally be accessed inside the 3D viewport’s N-panel if enabled in the preferences of Molecular Nodes.\n\nThere are currently three methods for importing structures via Molecular Nodes into Blender.\nYou can download from the PDB with the PDB tab, open a local .pdb or .mmcif file with the Local File tab, or open a Molecular Dynamics trajectory on the MD Trajectory tab.\nEach tab has a set of import options and fields to accept PDB IDs, names and file locations.\n\n\n\n\n\nField for the 4-letter PDB ID to be input, and button to start the download and import process.\n\n\n\nWhether or not to try and calculate bond information on the structure during import. Can be very slow for large structures, or if also building a biological assembly. The Cutoff represents the same cutoff value that is used inside of the PyMol bond detection.\n\n\n\nWhether or not to build the biological assembly, such as the full virus capsid, from the symmetry information that is present inside of the file. Assembly ID chooses which assembly information inside of the file to build from.\n\n\n\nInside of structure files, the base unit is usually 1 Å, which will become 1 m inside of Blender and 1 nm will become 10 m. To scale things down to a more manageable size we re-scale the structure so that 1 nm will become 1 m.\n\n\n\n\n\n\n\nAn optional name to be given to the structure on import.\n\n\n\nThe path to the structure file to be opened.\n\n\n\nWhether or not to try and calculate bond information on the structure during import. Can be very slow for large structures, or if also building a biological assembly. The Cutoff represents the same cutoff value that is used inside of the PyMol bond detection.\n\n\n\nWhether or not to build the biological assembly, such as the full virus capsid, from the symmetry information that is present inside of the file. Assembly ID chooses which assembly information inside of the file to build from.\n\n\n\nInside of structure files, the base unit is usually 1 Å, which will become 1 m inside of Blender and 1 nm will become 10 m. To scale things down to a more manageable size we re-scale the structure so that 1 nm will become 1 m.\n\n\n\n\n\n\n\nAn optional name to be given to the structure on import.\n\n\n\nThe file path to the toplogy file for import. See the table of supported topology formats for the formats that should be importable by Molecular Nodes.\n\n\n\nThe file path to the trajectory file for import. See the table of supported trajectory formats for the formats that should be importable by Molecular Nodes.\n\n\n\n\nStart Frame: The first possible frame from the coordinate file to be imported into Blender\nInterval: Imports every n th frame from the trajectory. 1 will import all frames from the trajectory.\nEnd Frame: The last possible frame from the coordinate file to be imported into Blender.\n\n\n\n\nInside of structure files, the base unit is usually 1 Å, which will become 1 m inside of Blender and 1 nm will become 10 m. To scale things down to a more manageable size we re-scale the structure so that 1 nm will become 1 m."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Molecular Nodes",
    "section": "",
    "text": "Molecular Nodes is an add-on and set of pre-made nodes for Blender & Blender’s Geometry Nodes, to import, animate and manipulate molecular data."
  },
  {
    "objectID": "index.html#features",
    "href": "index.html#features",
    "title": "Molecular Nodes",
    "section": "Features:",
    "text": "Features:\n\nDownload structures directly from the PDB using the 4-letter codes\nBuild biological assemblies from embedded information in .pdb files\nOpen local .pdb & .mmcif files\nOpen multi-state .pdb files and animate them as trajectories\nOpen molecular dynamics trajectory files such as .xtc & .dcd\nProvides a suite of nodes for artistic manipulation of molecular data inside of Geometry Nodes"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "To install molecular nodes, download the latest release from the github releases page. Ensure that you have a version of Molecular Nodes that matches the version of Blender you have installed."
  },
  {
    "objectID": "installation.html#open-preferences-panel",
    "href": "installation.html#open-preferences-panel",
    "title": "Installation",
    "section": "1.1 Open Preferences Panel",
    "text": "1.1 Open Preferences Panel\n\nClick ‘Edit’ -> ‘Preferences’ or press Cmd + , on Mac."
  },
  {
    "objectID": "installation.html#click-install-on-the-addon-page",
    "href": "installation.html#click-install-on-the-addon-page",
    "title": "Installation",
    "section": "1.2 Click ‘Install’ on the Addon Page",
    "text": "1.2 Click ‘Install’ on the Addon Page\n\nClick on the ‘Add-ons` tab on the middle left, then the ’Install’ button on the top right."
  },
  {
    "objectID": "installation.html#select-molecular_nodes_x.zip",
    "href": "installation.html#select-molecular_nodes_x.zip",
    "title": "Installation",
    "section": "1.3 Select molecular_nodes_X.zip",
    "text": "1.3 Select molecular_nodes_X.zip\n\nThe X’s will be the current version number of the add-on.\n\n\nImportantly do not download the entire Molecular Nodes GitHub repo and try to install that. Download the bundled release from the release page and install that with Blender."
  },
  {
    "objectID": "installation.html#enable-the-add-on",
    "href": "installation.html#enable-the-add-on",
    "title": "Installation",
    "section": "1.4 Enable the Add-on",
    "text": "1.4 Enable the Add-on\nIf the preferences panel doesn’t automatically show the installed add-on, search for the add-on to find it. Tick the box in the upper-left corner to enable it."
  },
  {
    "objectID": "installation.html#installing-atomium",
    "href": "installation.html#installing-atomium",
    "title": "Installation",
    "section": "2.1 Installing Atomium",
    "text": "2.1 Installing Atomium\nTo be able to download from the wwPDB and open local .pdb and .mmcif files, click the ‘Install Atomium’ button, which will install the python package atomium and make it available to Blender’s bundled Python.\n\nWait several seconds, and when Molecular Nodes detects it has successfully installed, the button should change away from red.\n\nMolecular nodes is now ready to be used. If you wish to enable reading of Molecular Dynamics trajectory files, such as .xtc from GROMACS, then you will need to install MDAnalysis. Checkout the Getting Started page on how to import structures from the PDB with molecular nodes."
  },
  {
    "objectID": "installation.html#installing-mdanalysis",
    "href": "installation.html#installing-mdanalysis",
    "title": "Installation",
    "section": "2.2 Installing MDAnalysis",
    "text": "2.2 Installing MDAnalysis\nTo parse and work with trajectory files, we use the great python package MDAnalysis. Unfortunately we are unable to install this package inside of Blender’s bundled python, so it requires some extra steps to enable this functionality.\n\n2.2.1 Installing MDAnalysis in Your Own Python\nBlender 3.1.* is bundled with Python 3.10. It is best if you have a local installation of the same Python version, to avoid potential errors, but some version mismatch may be workable.\nOnce you have an instllation of Python 3.10, install the MDAnalysis package as below.\npython3 -m pip install MDAnalysis\n\n\n2.2.2 Getting the location of MDAnalysis\nOnce the package has successfully installed, find the path to the package installation by importing the package inside of python and accessing the __path__ attribute.\nRun Python\npython3\nImport MDanalysis and get the path\nimport MDAnalysis as mda\nmda.__path__\n\nExample terminal output.\nCopy this path without the ‘MDAnalysis’ part, so the above path would be like this:\n/usr/local/lib/python3.10/site-packages\nAnd paste this into the path in the preferences panel of Molecular Nodes.\n\nNow click the ‘Check Installation’ button to see if Molecular Nodes can load MDAnalysis successfully.\nIf this fails, you may need to restart Blender and press the ‘Check Installation’ button again.\nIf successful, the red button will change colour as below, and all of the functionality of Molecular Nodes should be available."
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting Started",
    "section": "",
    "text": "This is an introduction to some of the basic functionality of Molecular Nodes to import and colour a protein by amino acid name. Molecular Nodes and Geometry Nodes in general has a lot more advanced functionality, but this can get quite complex quite quickly. Please see the additional tutorials for how to use some of that functionality. I also recommend finding more general Geometry Nodes tutorials for Blender, as all of that knowledge will help you work with Molecular Nodes inside of Blender and producing cool protein visualisations!\nOnce you start getting the hang of it, I find the best way to learn is just to play around, plugging different nodes into different sockets to see what might happen - the result might not be what you were looking for but something that you really like!"
  },
  {
    "objectID": "getting-started.html#atomic-properties",
    "href": "getting-started.html#atomic-properties",
    "title": "Getting Started",
    "section": "Atomic Properties",
    "text": "Atomic Properties\nA limitation of Molecular Nodes currently is the inability to have text attributes. To get around this, Molecular Nodes translates the different properties into numerical versions, and provides nodes to interact with the numeric versions of the data.\n\nAmino Acid Names\nFor example, the different amino-acid names have been assigned values from 1-20 based on alphabetical order. The properties is available from the MOL_atomic_properties nodes under the AA_name property. The property is a green diamond, indicating that it is an integer field and compatible with other numeric field sockets.\n\nAs an example, we can generate a random colour based on the numerical representation of the amino acid name, and colour out atoms based on that.\nCreate a Random Value node by pressing Shift + A inside of the Geometry Nodes window and selecting Utilities -> Random Value, and placing the node. Change the random type from Float to Vector. Plug the output of the AA_name into the ID of the Random Value node and plug the output into the different coloured sockets for the different elements in the MOL_style_colour node, as shown below.\nWe are creating a random numerical vector, with generated from the amino acid name. While we have created a numeric vector and not a colour vector, Blender treats an XYZ vector the same as an RGB vector and vice-versa, so you can use them interchangeably.\n\nThe different atoms should now be coloured based on their amino-acid name."
  }
]