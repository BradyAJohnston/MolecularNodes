## GFP Code From Prettymol Ported to MN

Note: WIP. Still some issues to work out


```python
%load_ext autoreload
%autoreload 2

import os
import shutil
import tempfile
from pathlib import Path
import bpy
import mathutils
import molecularnodes as mn
# from  molecularnodes.blender.materials import MaterialCreator
from molecularnodes.scene.base import Canvas


def clear_scene():
    bpy.context.view_layer.update()
    bpy.ops.outliner.orphans_purge(do_recursive=True)

    for mesh in bpy.data.meshes:
        bpy.data.meshes.remove(mesh)
    for material in bpy.data.materials:
        bpy.data.materials.remove(material)
    # for obj in bpy.data.objects:
    #     bpy.data.objects.remove(obj)
        bpy.context.view_layer.update()

def set_view_axis(axis="x", distance=5):
    camera = bpy.context.scene.camera
    if camera is not None:
        match axis:
            case 'x':
                camera.location = mathutils.Vector((distance, 0, 0))  # Move along X-axis
            case 'y':
                camera.location = mathutils.Vector((0, distance, 0))  # Move along Y-axis
            case 'z':
                camera.location = mathutils.Vector((0, 0, distance))  # Move along Z-axis
            case _:
                print(f"Invalid axis: {axis}. Choose from 'x', 'y', or 'z'.")

        # Point the camera to look at the origin (0, 0, 0)
        direction = camera.location - mathutils.Vector((0, 0, 0))
        rot_quat = direction.to_track_quat('Z', 'Y')
        camera.rotation_euler = rot_quat.to_euler()
        area = next(area for area in bpy.context.screen.areas if area.type == 'VIEW_3D')
        region = next(region for region in area.regions if region.type == 'WINDOW')

        for area in bpy.context.screen.areas:
            if area.type == 'VIEW_3D':
                area.spaces[0].region_3d.view_perspective = 'CAMERA'


mn.register()
set_view_axis(distance=2)
#can = Canvas(resolution=(640, 480))


#gfp_mat = MaterialCreator.green_glow().blenderize()
structure = mn.Molecule.fetch("1EMA", centre="centroid")

# select AA
structure.select.is_amino_acid().store_selection("Protein")
structure.add_style("cartoon", selection="Protein")
assert structure.bob.named_attribute("Protein").sum() == 1771

# select Chromophore
structure.select.res_name("CRO").store_selection("GFP")
# structure.add_style("sphere", selection="GFP", material = gfp_mat)
structure.add_style("sphere", selection="GFP")
assert structure.bob.named_attribute("GFP").sum() == 22


# get residues
resids = list(set(structure.bob.named_attribute("res_id").tolist()))


BASE_PNG = "pngs/gfptest3"
try:
    os.makedirs(BASE_PNG)
except:
    pass

for i in range(len(resids)) :
    if i % 10 == 0:
    # if i ==4:
    #     break
        clear_scene()
        structure = mn.Molecule.fetch("1EMA", centre="centroid")
        structure.select.is_amino_acid().res_id(resids[:i]).store_selection("Protein")
        structure.add_style("cartoon", selection="Protein")
        structure.select.res_name("CRO").store_selection("GFP")
        structure.add_style("sphere", selection="GFP")
        outpath = f"{BASE_PNG}/{i:03d}.png"
        # can.snapshot(path=outpath)
        with tempfile.TemporaryDirectory() as tmpdir:
            tmp_path = Path(tmpdir) / "snapshot.png"
            bpy.context.scene.render.filepath = str(tmp_path)
            bpy.ops.render.render(write_still=True, animation=False)
            shutil.copy(tmp_path, outpath)

```
