---
title: "Solvent Density"
description: "An example for visualizing solvent density."
execute:
  daemon: false
---

This example follows the [Calculating the solvent density around a protein](https://userguide.mdanalysis.org/stable/examples/analysis/volumetric/density_analysis.html) example from the MDAnalysis user guide.

```{python}
import warnings

import MDAnalysis as mda
import molecularnodes as mn
from MDAnalysis import transformations as trans
from MDAnalysis.analysis import density
from MDAnalysis.tests.datafiles import TPR, XTC

warnings.filterwarnings("ignore")
```

## Setup Molecular Nodes

```{python}

# create a canvas object
canvas = mn.Canvas()
```

## Load and transform Universe

```{python}
u = mda.Universe(TPR, XTC)

protein = u.select_atoms("protein")
water = u.select_atoms("resname SOL")

workflow = [
    trans.unwrap(u.atoms),  # unwrap all fragments
    trans.center_in_box(
        protein, center="geometry"  # move atoms so protein
    ),  # is centered
    trans.wrap(
        water, compound="residues"  # wrap water back into box
    ),  # keep each water whole
    trans.fit_rot_trans(
        protein, protein, weights="mass"  # align protein to first frame
    ),
]

u.trajectory.add_transformations(*workflow)
```

## Run density analysis and export `.dx` file

```{python}
ow = u.select_atoms("name OW")
dens = density.DensityAnalysis(ow, delta=4.0, padding=2)
dens.run()
# convert density unit to TIP4P
dens.results.density.convert_density("TIP4P")
# Export density to a file
dens.results.density.export("water.dx")
```

## Add Universe to Blender

```{python}
# get MN session
session = mn.session.get_session()
# add trajectory
t = mn.Trajectory(u).add_style(style="cartoon")
```

## Add density component

```{python}
# load density file
d = mn.entities.density.io.load(
    file_path="water.dx",
    style="density_iso_surface",
    overwrite=True,
)
# add a density info annotation for the density entity
da = d.annotations.add_density_info()
# only show the filename and ISO value
da.show_origin = da.show_delta = da.show_shape = False
```

## Visualization

### Set density style values

```{python}
# get the density style
ds = d.styles[0]
# set the positive color to blue with 50% opacity
ds.positive_color = (0, 0, 1, 0.5)
```

### ISO Value 0.5

```{python}
# set ISO value to 0.5
ds.iso_value = 0.5
```

```{python}
# frame the density component and render
canvas.frame_view(d.get_view(), viewpoint="front")
canvas.snapshot()
```

### ISO Value 0.5 with Contours

```{python}
# set ISO value to 0.5
ds.iso_value = 0.5
# enable contours
ds.show_contours = True
# set contour thickness
ds.contour_thickness = 0.25
# set contour colors
ds.contour_color = (1, 1, 1, 1)
```

```{python}
# frame the density component and render
canvas.frame_view(d.get_view(), viewpoint="front")
canvas.snapshot()
```

### From Top with Grid Axes

```{python}
# add grid axes annotation
ga = d.annotations.add_grid_axes()
```

```{python}
# set viewpoint to top
canvas.frame_view(d.get_view(), viewpoint="top")
canvas.snapshot()
# hide grid axes
ga.visible = False
```

### ISO Value 0.5 sliced from Left

```{python}
# slice the grid from the left 50%
ds.slice_left = 50
```

```{python}
# set viewpoint to left
canvas.frame_view(d.get_view(), viewpoint="left")
canvas.snapshot()
```

### Only Contours

```{python}
# reset slicing
ds.slice_left = 0
# only show contours
ds.only_contours = True
```

```{python}
# set viewpoint to front
canvas.frame_view(d.get_view(), viewpoint="front")
canvas.snapshot()
```
