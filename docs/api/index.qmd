---
title: Python API
description: Introduction to the APi and the quirks of programming in Blender
jupyter: python3
---

::: {.callout-warning}
# The API is Experimental

Molecular Nodes was first built as an add-on for Blender, intended to be used through the GUI.

A lot of improvements have been made to now allow a scriptable interface, but a lot of these changes should still be considered experimental and may change in future versions. The version is pinned to the versions of Blender it is intended for, so while MN is currently version `4.4`, it should not be considered that stable.

The quirks of progamming within Blender are numerous and will likely remain regardless of version.
:::


## You are working in a Scene

When scripting with Molecular Nodes, it's important to remember that everything we do doesn't work in isolation. All of the objects we add & changes we make happen within a "3D scene" inside of Blender, so deleting one thing or another doesn't always clean up and reset everything you might expect.

Blender itself has a very extensive python API, accessible through the `bpy` module. Molecular Nodes is designed so that for most general usage you shouldn't have to ever directly use `bpy`, but all of the complex settings and controls are still always accessible through that module.


## Getting Started

To get started, with import the module start a new scene be creating out [`Canvas()`](reference/Canvas.qmd) object. This object is how we change settings for how the scene will render and other related settings sich as resolution.

```{python}
import molecularnodes as mn

canvas = mn.Canvas(mn.scene.Cycles(samples=32), resolution=(720, 480))
```

## Add a `Molecule`

The [`Molecule`](reference/Molecule.qmd) can take a `AtomArray` from the `biotite` package directly, or it has the [`fetch`](reference/Molecule.qmd#fetch) and [`load`](reference/Molecule.qmd#) class methods to download directly from the PDB or load a local file.

After loading the molecule, to be able to see anything we must first add a style. Then we can frame the camera on the object and take a snapshot.

```{python}
mol = mn.Molecule.fetch("4ozs")
mol.add_style(mn.StyleCartoon())
canvas.frame_object(mol)
canvas.snapshot()
```

## The Molecule Object

The `Molecule` object has the original data, as well as the Blender object associated with.

The different methods that are associated mostly interact with the Blender object, which is accessible via the `mol.object`, and the data is accessible via `mol.array`, which is a `biotite.AtomArray` object.
```{python}
print(f"{len(mol)=}")
print(f"{mol.object=}")
print(f"{mol.array[0][:10]=}")
```

```{python}
mol.named_attribute('chain_id')
```

```{python}
mol.position
```

### Updating the Atom Positions

```{python}
mol.position -= mol.centroid()
mol.position
```


```{python}
canvas.clear()
canvas.engine = "eevee"
canvas.resolution = (800, 800)
canvas.transparent = True

mol = (
        mn.Molecule
        .fetch("Q8W3K0", database="alphafold")
        .add_style(
                mn.StyleCartoon(),
                color="pLDDT",
                material=mn.material.AmbientOcclusion()
        )
)
canvas.frame_view(mol)
canvas.snapshot()
```